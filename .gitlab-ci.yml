stages:
  - validate
  - build
  - docker
  - deploy

default:
  image:
    name: maven:3-jdk-8-slim
    pull_policy: if-not-present
  cache:
    paths:
      - .m2/repository/
    when: always
  artifacts:
    expire_in: 36 hours
  tags:
    - whirl
  timeout: 3h

variables:
  MAVEN_OPTS: '-Dmaven.repo.local=.m2/repository'

checkstyle:
  stage: validate
  rules:
    # Run on merge requests to develop branch
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == 'develop'
      when: always
  allow_failure: true
  script:
    - mvn $MAVEN_OPTS checkstyle:checkstyle-aggregate checkstyle:check
  artifacts:
    paths:
      - target/site/*
    when: on_failure
    expire_in: 36 hours

# Build everywhere.
.build:
  stage: build
  script:
    - apt-get update
    - apt-get install -y libfreetype6 libfontconfig1 nodejs
    - mvn $MAVEN_OPTS package -DskipTests=true -Dmaven.javadoc.skip=true -B -V

build-with-artifacts:
  extends:
    - .build
  rules:
    # build on merge request
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # prevent double build on merge request and branch at the same time
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # build on all branches
    - if: $CI_COMMIT_BRANCH
  artifacts:
    paths:
      - "**/*.war"
    when: on_success
    expire_in: 36 hours

# Creating and pushing docker image.
.docker:
  stage: docker
  needs:
    - build-with-artifacts
  dependencies:
    - build-with-artifacts
  image:
    name: docker:20.10.21
    pull_policy: if-not-present
  variables:
    IMAGE_NAME: "whirl"
    IMAGE_TAG: "${CI_COMMIT_TAG}"
  script:
    - docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} docker.io
    - docker build -t otlichnosti/whirl:${IMAGE_TAG}-app --target app -f docker/Packaged.Dockerfile .
    - docker build -t otlichnosti/whirl:${IMAGE_TAG}-editor --target editor -f docker/Packaged.Dockerfile .
    - docker build -t otlichnosti/whirl:${IMAGE_TAG} --target all -f docker/Packaged.Dockerfile .
    - docker push otlichnosti/whirl:${IMAGE_TAG}-app
    - docker push otlichnosti/whirl:${IMAGE_TAG}-editor
    - docker push otlichnosti/whirl:${IMAGE_TAG}

docker-develop:
  extends:
    - .docker
  variables:
    IMAGE_TAG: "develop"
  rules:
    # Run on develop branch not on merge requests.
    - if: $CI_COMMIT_BRANCH == 'develop'
      when: always

docker-release:
  extends:
    - .docker
  variables:
    IMAGE_TAG: "${CI_COMMIT_TAG}"
  rules:
    # Run on tag.
    - if: $CI_COMMIT_TAG
      when: always

docker-release-latest:
  extends:
    - .docker
  variables:
    IMAGE_TAG: "latest"
  rules:
    # Run on tag.
    - if: $CI_COMMIT_TAG
      when: always

# Deploy to dev server with docker compose.
deploy-dev:
  stage: deploy
  needs:
    - build-with-artifacts
  dependencies:
    - build-with-artifacts
  image:
    name: docker:20.10.21
    pull_policy: if-not-present
  rules:
    # build on merge request
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
    # prevent double build on merge request and branch at the same time
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # build on all branches
    - if: $CI_COMMIT_BRANCH
      when: manual
  allow_failure: true
  before_script:
    - command -v ssh-agent >/dev/null || apk add openssh-client
    - eval $(ssh-agent -s)
    - cat "${DEV_AUTHORIZED_KEY}" | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
  script:
    # Create config folder on remote server.
    - ssh -o StrictHostKeyChecking=no ${DEV_USER}@${DEV_HOST} 'mkdir -p ~/conf/dev'
    # Copy confinguration files to remote server to folder ~/conf/dev
    - scp -o StrictHostKeyChecking=no -pr docker/conf/ ${DEV_USER}@${DEV_HOST}:~/conf/dev
    # Copy database initialization files to remote server to folder ~/conf/dev
    - scp -o StrictHostKeyChecking=no -pr docker/db/ ${DEV_USER}@${DEV_HOST}:~/conf/dev
    # replace password="password" in ~/conf/dev/conf/postgresql/context.xml.default on remote server
    - >-
      ssh -o StrictHostKeyChecking=no ${DEV_USER}@${DEV_HOST}
      "sed -i 's/password=\"password\"/password=\"${DEV_POSTGRES_PASSWORD}\"/g' ~/conf/dev/conf/postgresql/context.xml.default"
    # replace PASSWORD 'password' in ~/conf/dev/db/postgresql/01-create-db.sh on remote server
    - >-
      ssh -o StrictHostKeyChecking=no ${DEV_USER}@${DEV_HOST} "sed -i \"s/'password'/'${DEV_POSTGRES_PASSWORD}'/g\" ~/conf/dev/db/postgresql/01-create-db.sh"
    - >-
      docker --host "ssh://${DEV_USER}@${DEV_HOST}"
      compose
      --file ./docker/docker-compose.yml
      --env-file ${DEV_ENV_FILE}
      --profile packaged
      --project-name whirl-develop
      up --force-recreate --build --detach