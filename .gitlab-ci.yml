stages:
  - check
  - build
  - verify
  - docker
  - stage
  - deploy

default:
  image:
    name: maven:3.8.6-openjdk-8-slim
    pull_policy: if-not-present
  cache:
    paths:
      - .m2/repository/
    when: always
  artifacts:
    expire_in: 36 hours
  tags:
    - whirl
  timeout: 3h
  after_script:
    # Очищаем артефакты которые на надо кешировать
    - rm -rf .m2/repository/org/whirlplatform


variables:
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

Check Checkstyle:
  stage: check
  rules:
    # Run on source event = merge requests
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
  allow_failure: false
  script:
    - mvn ${MAVEN_OPTS} checkstyle:checkstyle-aggregate
    - mvn ${MAVEN_OPTS} checkstyle:check
  artifacts:
    paths:
      - target/site/*
    when: on_failure
    expire_in: 36 hours

Check Tests:
  stage: check
  rules:
    # Run on "develop" branch
    - if: $CI_COMMIT_REF_NAME == 'develop'
      when: always
    # Run on source event = merge requests
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
  allow_failure: false
  script:
    - mvn ${MAVEN_OPTS} test -Dgwt.skipCompilation=true
  artifacts:
    reports:
      junit:
        - "**/target/surefire-reports/*.xml"
    when: on_failure
    expire_in: 36 hours

# Build everywhere.
.build:
  stage: build
  variables:
    REVISION: "" # Should be set by the job.
    CHANGELIST: "" # Should be set by the job.
    SHA: "" # Should be set by the job.
    MAVEN_GOALS: "package"
  script:
    - apt-get update
    - apt-get install -y libfreetype6 libfontconfig1 nodejs
    - mvn ${MAVEN_OPTS} -Drevision=${REVISION} -Dchangelist=${CHANGELIST} -Dsha1=${SHA} ${MAVEN_GOALS} -Dmaven.javadoc.skip=true --batch-mode --show-version

Package:
  extends:
    - .build
  rules:
    # Run on source event = merge request
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
    # Build on all branches
    - if: $CI_COMMIT_BRANCH == "develop"
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_COMMIT_TAG
      when: always
      variables:
        MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dgwt.optimize=9 -Dgwt.style=OBFUSCATED"
    - if: $CI_COMMIT_BRANCH
      when: manual
  allow_failure: false
  variables:
    REVISION: ${CI_COMMIT_BRANCH}
    CHANGELIST: "-SNAPSHOT"
    SHA: ${CI_COMMIT_SHORT_SHA}
  artifacts:
    paths:
      - "**/*.war"
    when: on_success
    expire_in: 36 hours

# Verify integration tests.
Verify:
  stage: verify
  rules:
    # Run on source event = merge request
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
    # On all branches
    - if: $CI_COMMIT_BRANCH == 'develop'
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_COMMIT_BRANCH
      when: manual
  allow_failure: false
  needs:
    - job: Package
      artifacts: true
  script:
    - mvn $MAVEN_OPTS compile failsafe:verify -Dsurefire.skip=true -Dmaven.javadoc.skip=true --batch-mode --show-version
  artifacts:
    paths:
      - "**/target/failsafe-reports/**/*"
    reports:
      junit:
        - "**/target/failsafe-reports/*.xml"
    when: always
    expire_in: 36 hours

# Creating and pushing docker image.
.docker:
  stage: docker
  needs:
    - job: Package
      artifacts: true
  image:
    name: docker:20.10.21
    pull_policy: if-not-present
  variables:
    IMAGE_TAG: "" # Should be set in the job
    REVISON: "" # Should be set in the job
    CHANGELIST: "" # Should be set in the job
    SHA: "" # Should be set in the job
  script:
    - docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} docker.io
    - docker build -t otlichnosti/whirl:${IMAGE_TAG}-app --target app -f docker/Packaged.Dockerfile .
    - docker build -t otlichnosti/whirl:${IMAGE_TAG}-editor --target editor -f docker/Packaged.Dockerfile .
    - docker build -t otlichnosti/whirl:${IMAGE_TAG} --target all -f docker/Packaged.Dockerfile .
    - docker push otlichnosti/whirl:${IMAGE_TAG}-app
    - docker push otlichnosti/whirl:${IMAGE_TAG}-editor
    - docker push otlichnosti/whirl:${IMAGE_TAG}

Publish Docker Develop:
  extends:
    - .docker
  rules:
    # Run on develop branch not on merge requests.
    - if: $CI_COMMIT_BRANCH == 'develop'
      when: always
  variables:
    IMAGE_TAG: "develop"
    REVISION: "develop"
    CHANGELIST: "-SNAPSHOT"
    SHA: ${CI_COMMIT_SHORT_SHA}

Publish Docker Release TAG:
  extends:
    - .docker
  rules:
    # Run on tag.
    - if: $CI_COMMIT_TAG
      when: always
  variables:
    IMAGE_TAG: "${CI_COMMIT_TAG}"
    REVISION: "${CI_COMMIT_TAG}"
    CHANGELIST: ""
    SHA: ""

Publish Docker Release LATEST:
  extends:
    - .docker
  rules:
    # Run on tag.
    - if: $CI_COMMIT_TAG
      when: always
  variables:
    IMAGE_TAG: "latest"
    REVISION: "${CI_COMMIT_TAG}"
    CHANGELIST: ""
    SHA: ""




generate-deploy:
  stage:
    stage
  variables:
    DEPLOY_ARGS: ""
    TEMPLATE: |
      import sys

      def generate_job(name):
          str = """
      deploy-{name}:
        stage: deploy
        rules:
          - if: $$CI_PIPELINE_SOURCE == "schedule" && $$ENV == "demo"
            when: always
          # build on all branches
          - if: $$CI_COMMIT_BRANCH
            when: manual
        needs:
          - job: Package
            artifacts: true
        image:
          name: docker:20.10.21
          pull_policy: if-not-present
        environment:
          name: {name}
          url: http://{name}.whirl-platform.ru:8090/
        before_script:
          - command -v ssh-agent >/dev/null || apk add openssh-client
          - eval $$(ssh-agent -s)
          - cat "$${{AUTHORIZED_KEY}}" | ssh-add -
          - mkdir -p ~/.ssh
          - chmod 700 ~/.ssh
        script:
          - echo "$$CLEAN_DATABASE"
          - echo "$$ENV"
          # Remove docker volume on demo server
          - |
            if [ $$CLEAN_DATABASE == "true" ]; then 
              ssh -o StrictHostKeyChecking=no $${{ENV_USER}}@$${{ENV_HOST}} 'sudo docker rm --force postgres ' ;
              ssh -o StrictHostKeyChecking=no $${{ENV_USER}}@$${{ENV_HOST}} 'sudo docker volume rm --force whirl-develop_db-data ' ;
            fi
          # Create config folder on remote server.
          - ssh -o StrictHostKeyChecking=no $${{ENV_USER}}@$${{ENV_HOST}} 'mkdir -p ~/conf/whirl'
          # Copy configuration files to remote server to folder ~/conf/whirl
          - scp -o StrictHostKeyChecking=no -pr docker/conf/ $${{ENV_USER}}@$${{ENV_HOST}}:~/conf/whirl
          # Copy database initialization files to remote server to folder ~/conf/whirl
          - scp -o StrictHostKeyChecking=no -pr docker/db/ $${{ENV_USER}}@$${{ENV_HOST}}:~/conf/whirl
          # replace password="password" in ~/conf/whirl/conf/postgresql/context.xml.default on remote server
          - >-
            ssh -o StrictHostKeyChecking=no $${{ENV_USER}}@$${{ENV_HOST}}
            "sed -i 's/password=\"password\"/password=\"$${{ENV_POSTGRES_PASSWORD}}\"/g' ~/conf/whirl/conf/postgresql/context.xml.default"
          # replace PASSWORD 'password' in ~/conf/whirl/db/postgresql/01-create-db.sh on remote server
          - >-
            ssh -o StrictHostKeyChecking=no $${{ENV_USER}}@$${{ENV_HOST}}
            "sed -i \"s/'password'/'$${{ENV_POSTGRES_PASSWORD}}'/g\" ~/conf/whirl/db/postgresql/01-create-db.sh"
          - >-
            docker --host "ssh://$${{ENV_USER}}@$${{ENV_HOST}}"
            compose
            --file ./docker/docker-compose.yml
            --env-file $${{ENV_ENV_FILE}}
            --profile packaged
            --project-name whirl-develop
            up --force-recreate --build --detach
          - ssh -o StrictHostKeyChecking=no $${{ENV_USER}}@$${{ENV_HOST}} "sudo docker system prune --all --force"
      """
          return str.format(name=name)


      def main(names):
          with open("generated-deploy.yml", "w") as f_out:
              for name in names:
                  f_out.write(generate_job(name))


      if __name__ == "__main__":
          names = sys.argv[1].split(",")
          main(names)
  image:
    python
  before_script:
    - apt update
    - apt install -y jq
    - apt-get install -y curl
    - jq --version
  script:

    # Request environmental variables
    - |
      DEPLOY_ARGS=$(curl --header "JOB-TOKEN: $CI_JOB_TOKEN" "https://gitlab.com/api/v4/projects/41380977/environments")
    - echo $DEPLOY_ARGS > env.json
    - jq '.' env.json

    # Form argument array from json file
    - declare -a arr=( $(jq '.[].name' env.json) )
    - echo $arr

    # Form correct arguments from array
    - DEPLOY_ARGS=""
    - |+
      for i in "${arr[@]}"; do
        i=$(echo $i | tr -d '"')
        echo "found env $i"
        DEPLOY_ARGS+=$i,
      done

    # Delete last comma
    - DEPLOY_ARGS=${DEPLOY_ARGS::-1}
    - echo $DEPLOY_ARGS

    - echo "$TEMPLATE" > child_generator.py

    # Print what is inside the .py file
    - echo "$(<child_generator.py )"

    # Form jobs file
    - python3 child_generator.py $DEPLOY_ARGS

  artifacts:
    paths:
      - generated-deploy.yml

child-deploy:
  stage: deploy
  trigger:
    include:
      - artifact: generated-deploy.yml
        job: generate-deploy
